# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
permissions:
  contents: read
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - '*'       # Run the workflow on all branches
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests


env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}\artifacts

defaults:
  run:
    shell: pwsh

jobs:
  run_test:
    runs-on: windows-latest
    steps:
    - name: checkout
      uses: actions/checkout@v5
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

  #  - name: Run tests
  #    run: dotnet test --configuration Debug --filter "TestCategory=Static"

  create_nuget:
    runs-on: windows-latest
    needs: [ run_test ]
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
          dotnet-version: 8

    - name: Restore dependencies 
      run:  dotnet restore

    - name: Build
      run:  dotnet build --configuration Release

    - name: Get version from tag
      id: get_version
      if: github.event_name == 'release'
      uses: jannemattila/get-version-from-tag@v4
     
    - name: Ensure output directory exists
      run: |
           New-Item -ItemType Directory -Force -Path "${{ env.NuGetDirectory }}"

    - name: Get Version (release)
      if: github.event_name == 'release'
      shell: bash
      run: |
         VERSION=$(echo "${{ steps.get_version.outputs.version }}")
         dotnet pack --configuration Release -p:PackageVersion=${VERSION} --output "${NuGetDirectory}"

    - name: Get Version (none release)
      if: github.event_name != 'release'
      shell: bash
      run: |
         VERSION=$(date +%s) # Use current timestamp as version
         dotnet pack --configuration Release -p:PackageVersion=${VERSION} --output "${NuGetDirectory}"

    - name: Log packed files
      run: Get-ChildItem "${NuGetDirectory}" -Recurse

    # build the NuGet package as an artifact,
    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg
